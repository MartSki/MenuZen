// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MenuZen.Domain.Tests.Features.Ingredients
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CréerIngrédient")]
    public partial class CreerIngredientFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("fr"), "Features/Ingrédients", "CréerIngrédient", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CréerIngrédient.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Créer un ingrédient avec succès")]
        [NUnit.Framework.TestCaseAttribute("Steak", "IconeSteak", null)]
        public async System.Threading.Tasks.Task CreerUnIngredientAvecSucces(string nomIngredient, string iconeIngredient, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NomIngrédient", nomIngredient);
            argumentsOfScenario.Add("IcôneIngrédient", iconeIngredient);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Créer un ingrédient avec succès", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
 await testRunner.GivenAsync(string.Format("un nom d ingrédient \'{0}\'", nomIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Etant donné ");
#line hidden
#line 6
 await testRunner.AndAsync(string.Format("une icône d ingrédient \'{0}\'", iconeIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "NomCatégorieIngrédients",
                            "IcôneCatégorieIngrédients",
                            "CouleurCatégorieIngrédients"});
                table1.AddRow(new string[] {
                            "Viandes",
                            "IconeViande",
                            "Rouge"});
#line 7
 await testRunner.AndAsync("une catégorie d ingrédients définie par :", ((string)(null)), table1, "Et ");
#line hidden
#line 10
 await testRunner.WhenAsync("je crée l\'ingrédient", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quand ");
#line hidden
#line 11
 await testRunner.ThenAsync("l ingrédient est crée avec succès", ((string)(null)), ((global::Reqnroll.Table)(null)), "Alors ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("le nom de l ingrédient est \'{0}\'", nomIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("l icône l ingrédient est \'{0}\'", iconeIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "NomCatégorieIngrédients",
                            "IcôneCatégorieIngrédients",
                            "CouleurCatégorieIngrédients"});
                table2.AddRow(new string[] {
                            "Viandes",
                            "IconeViande",
                            "Rouge"});
#line 14
 await testRunner.AndAsync("la catégorie d ingrédients est :", ((string)(null)), table2, "Et ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erreur : Créer un ingrédient sans nom")]
        [NUnit.Framework.TestCaseAttribute("IconeSteak", "Ingrédient.Nom", "Donnée obligatoire.", null)]
        public async System.Threading.Tasks.Task ErreurCreerUnIngredientSansNom(string iconeIngredient, string codeErreur, string messageErreur, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IcôneIngrédient", iconeIngredient);
            argumentsOfScenario.Add("CodeErreur", codeErreur);
            argumentsOfScenario.Add("MessageErreur", messageErreur);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Erreur : Créer un ingrédient sans nom", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.GivenAsync(string.Format("une icône d ingrédient \'{0}\'", iconeIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Etant donné ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "NomCatégorieIngrédients",
                            "IcôneCatégorieIngrédients",
                            "CouleurCatégorieIngrédients"});
                table3.AddRow(new string[] {
                            "Viandes",
                            "IconeViande",
                            "Rouge"});
#line 24
 await testRunner.AndAsync("une catégorie d ingrédients définie par :", ((string)(null)), table3, "Et ");
#line hidden
#line 27
 await testRunner.WhenAsync("je crée l\'ingrédient", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quand ");
#line hidden
#line 28
 await testRunner.ThenAsync("la création de l ingrédient est en erreur", ((string)(null)), ((global::Reqnroll.Table)(null)), "Alors ");
#line hidden
#line 29
 await testRunner.AndAsync(string.Format("le code d erreur de la création de l ingrédient est \'{0}\'", codeErreur), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
#line 30
 await testRunner.AndAsync(string.Format("le message d erreur de la création de l ingrédient est \'{0}\'", messageErreur), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Erreur : Créer un ingrédient avec un nom de plus de 50 caractères")]
        [NUnit.Framework.TestCaseAttribute("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "IconeSteak", "Ingrédient.Nom", "La longueur maximale est de 50 caractères.", null)]
        public async System.Threading.Tasks.Task ErreurCreerUnIngredientAvecUnNomDePlusDe50Caracteres(string nomIngredient, string iconeIngredient, string codeErreur, string messageErreur, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NomIngrédient", nomIngredient);
            argumentsOfScenario.Add("IcôneIngrédient", iconeIngredient);
            argumentsOfScenario.Add("CodeErreur", codeErreur);
            argumentsOfScenario.Add("MessageErreur", messageErreur);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Erreur : Créer un ingrédient avec un nom de plus de 50 caractères", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync(string.Format("un nom d ingrédient \'{0}\'", nomIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Etant donné ");
#line hidden
#line 38
 await testRunner.GivenAsync(string.Format("une icône d ingrédient \'{0}\'", iconeIngredient), ((string)(null)), ((global::Reqnroll.Table)(null)), "Etant donné ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "NomCatégorieIngrédients",
                            "IcôneCatégorieIngrédients",
                            "CouleurCatégorieIngrédients"});
                table4.AddRow(new string[] {
                            "Viandes",
                            "IconeViande",
                            "Rouge"});
#line 39
 await testRunner.AndAsync("une catégorie d ingrédients définie par :", ((string)(null)), table4, "Et ");
#line hidden
#line 42
 await testRunner.WhenAsync("je crée l\'ingrédient", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quand ");
#line hidden
#line 43
 await testRunner.ThenAsync("la création de l ingrédient est en erreur", ((string)(null)), ((global::Reqnroll.Table)(null)), "Alors ");
#line hidden
#line 44
 await testRunner.AndAsync(string.Format("le code d erreur de la création de l ingrédient est \'{0}\'", codeErreur), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
#line 45
 await testRunner.AndAsync(string.Format("le message d erreur de la création de l ingrédient est \'{0}\'", messageErreur), ((string)(null)), ((global::Reqnroll.Table)(null)), "Et ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
